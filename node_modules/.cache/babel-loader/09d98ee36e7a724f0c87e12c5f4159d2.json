{"ast":null,"code":"import * as ActionTypes from './actionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments: ' + error.message);\n    alert('Comments could not be posted:\\n' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => dispatch => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => dispatch => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => dispatch => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postFeedback = feedback => dispatch => {\n  const newFeedback = Object.assign({\n    date: new Date().toISOString()\n  }, feedback);\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newFeedback),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post feedback: ' + error.message);\n    alert('Feedback could not be posted:\\n' + error.message);\n  });\n};","map":{"version":3,"sources":["D:/WebDev-coursera/open/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errorMessage","json","catch","console","log","message","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","errmess","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","feedback","newFeedback","Object","assign"],"mappings":"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","sourcesContent":["import * as ActionTypes from './actionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment,\r\n    };\r\n\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error => {\r\n            console.log('Post comments: ' + error.message);\r\n            alert('Comments could not be posted:\\n' + error.message)\r\n        })\r\n};\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)))\r\n}\r\n\r\nexport const dishesLoading = () => (dispatch) => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseUrl + 'comments')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)))\r\n}\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading(true));\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)))\r\n}\r\n\r\nexport const promosLoading = () => (dispatch) => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(leadersLoading(true));\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)))\r\n}\r\n\r\nexport const leadersLoading = () => (dispatch) => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});\r\n\r\nexport const postFeedback = (feedback) => (dispatch) => {\r\n    const newFeedback = Object.assign({ date: new Date().toISOString() }, feedback);\r\n    \r\n    return fetch(baseUrl + 'feedback', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errorMessage = new Error(error.errorMessage);\r\n                throw errorMessage;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error => {\r\n            console.log('Post feedback: ' + error.message);\r\n            alert('Feedback could not be posted:\\n' + error.message)\r\n        })\r\n};"]},"metadata":{},"sourceType":"module"}